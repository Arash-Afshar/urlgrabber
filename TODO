ALPHA:

  * MirrorGroups
    - docs
    - possibly move the arguments that make urlXXX different into the
      kwargs stuff, so that the wrapping in MirrorGroups can be a little
      cleaner - this would mean that you'd have to do 
         urlgrab(url, filename=filename)
      which is annoying (and different from how it's being used)
    - add sublcasses of MirrorGroup for different failover policies,
      at least providing the same behavior as what yum does now

  * Reget
    - fix bug with self.opts; the reget code can modify self.opts in the
	  URLGrabberFileObject, which _may_not_ be a copy of the grabber's
	  opts.  This may go away if we decide to deal with opts a little
      differently.
    - do a little testing for ftp:// and file://
    
  * ponder and implement ryan's idea about restructuring the import style
    https://lists.dulug.duke.edu/pipermail/yum-devel/2004-March/000077.html

ALPHA 2:

  * Consider adding timeout keyword arg that would handle setting the socket
    timeout natively under python 2.3 or using timeoutsocket.py hack if 
    available and using python < 2.3.

  * Test proxy support with authenticating proxies (http and ftp).   

  * FTP proxy testing in general.

  * Have a plan for KeyboardInterupt exception handling. This is driven by 
    recent chatter on the yum list about Ctrl-C handling. Seth suggests 
    Ctrl-C as a "Skip to Next Mirror" trigger when processing MirrorGroups.

Misc/Maybe:

  * BatchURLGrabber/BatchMirrorGroup for concurrent downloads and possibly to
    handle forking into secure/setuid sandbox.

  * Make keepalive functionality work when used in multiple threads.
  
  * Consider adding a progress_meter implementation that can be used in 
    concurrent download situations (I have some ideas about this -mds)
  
  * Consider using CacheFTPHandler instead of FTPHandler in byterange.py. 
    CacheFTPHandler reuses connections but this may lead to problems with
    ranges. I've tested CacheFTPHandler with ranges using vsftpd as a 
    server and everything works fine but this needs more exhaustive tests 
    or a fallback mechanism. Also, CacheFTPHandler breaks in the same way 
    keepalive breaks with multiple threads.

  * Consider some statistics tracking so that urlgrabber can record the 
    speed/reliability of different servers.  This could then be used by
    the mirror code for choosing optimal servers (slick, eh?)
